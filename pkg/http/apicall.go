package http

import (
	"edge_exporter/pkg/database"
	"edge_exporter/pkg/config"
	"crypto/tls"
	"fmt"
	"io/ioutil"
	"log"
	"net/http"
	"net/url"
	//"os"
	"strings"
	"time"
	"database/sql"
	_ "github.com/mattn/go-sqlite3"
)

// The functions APISessionAuth(...) and getAPIData(...) utilizes curl-to-go translator but is modified for cookie management and storing these with sqlite.
// Generated by curl-to-Go: https://mholt.github.io/curl-to-go

// curl -k --data "Username=student&Password=PanneKake23" -i -v https://10.233.230.11/rest/login

// TODO: This is insecure; use only in dev environments.
func APISessionAuth(username string, password string, ipaddress string) (string, error) {
	//var read []byte
	var phpsessid string
	var err error
	phpsessid, err = database.GetSqliteKey(ipaddress)
	//fmt.Println(phpsessid)
	if phpsessid != "" {
		//fmt.Println("henta fra sql")

		return phpsessid, nil
	}

	cfg := config.GetConf(&config.Config{})
	timeout := cfg.Authtimeout
	tr := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}

	client := &http.Client{Transport: tr, Timeout: time.Duration(timeout) * time.Second}

	params := url.Values{}
	params.Add("Username", username)
	params.Add("Password", password)
	body := strings.NewReader(params.Encode())

	req, err := http.NewRequest("POST", "https://"+ipaddress+"/rest/login", body)
	if err != nil {
		log.Flags()
		fmt.Println("error in auth:", err)
		return "Error fetching data", err
		//	fmt.Println("error in systemExporter:", error)
	}
	req.Header.Set("Content-Type", "application/x-www-form-urlencoded")

	resp, err := client.Do(req)
	if err != nil {
		log.Flags()
		fmt.Println("error in auth:", err)
		return "Error fetching data", err
		//fmt.Println("error in systemExporter:", err)
	}

	m := make(map[string]string)
	for _, c := range resp.Cookies() {
		m[c.Name] = c.Value
	}
	phpsessid = m["PHPSESSID"]

	defer resp.Body.Close()



	var sqliteDatabase *sql.DB

	sqliteDatabase, err = sql.Open("sqlite3", "./sqlite-database.db")
	if err != nil {
		fmt.Println(err)
	}


	now := time.Now().Format(time.RFC3339)

		database.InsertAuth(sqliteDatabase, ipaddress, phpsessid, now)

	return phpsessid, nil
}




func GetAPIData(url string, phpsessid string) (string, []byte, error) {

	tr2 := &http.Transport{
		TLSClientConfig: &tls.Config{InsecureSkipVerify: true},
	}
	client2 := &http.Client{Transport: tr2}
	cookie1 := &http.Cookie{
		Name:  "PHPSESSID",
		Value: phpsessid,
		//Path:     "/",
		MaxAge:   3600,
		HttpOnly: false,
		Secure:   true,
	}
	req2, err := http.NewRequest("GET", url, nil)
	if err != nil {
		log.Flags()
		fmt.Println("error in getapidata():", err)
		return "Error fetching data", nil, err
		//	fmt.Println("error in systemExporter:", error)
	}
	req2.AddCookie(cookie1)
	resp2, err := client2.Do(req2)
	if err != nil {
		log.Flags()
		fmt.Println("error in getapidata():", err)
		return "Error fetching data", nil, err
	}

	b, err := ioutil.ReadAll(resp2.Body)
	defer resp2.Body.Close()

	return "Success", b, err
}
